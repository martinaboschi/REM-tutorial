y = x[3],
native = native,
first_records = first_records,
reg = reg,
data_temperature = data_temperature))
dat.gam$dt2 <- apply(dat.gam[,c("sp2.num", "r2.num", "year")], 1,
function(x) climatic_dissimilarity(sp.n = x[1],
r.n = x[2],
y = x[3],
native = native,
first_records = first_records,
reg = reg,
data_temperature = data_temperature))
dat.gam$dt = dat.gam$dt1 - dat.gam$dt2
save.image("solution01.RData")
load("solution01.RData")
gam_dt.only <- gam(y ~ dt - 1,
family="binomial"(link = 'logit'),
method="REML", data=dat.gam)
summary(gam_dt.only)
save(gam_dt.only, file="gam_dt.only.RData")
rm(gam_dt.only)
save.image("input02.RData")
knitr::include_graphics("trade-idea.pdf")
load("input02.RData")
t <- which(data_trade$transfer < 0)
data_trade$transfer[t] <- 0
trade.funct <- function(inv, r.n, y, reg, data_trade){
# Convert input arguments to numeric type if not already
r.n <- as.numeric(r.n)
y <- as.numeric(y)
# Check if there are already invaded countries
if(length(inv)!=0){
# Find rows that involve invaded countries as sending trade
u <- which(data_trade$FromRegion %in% reg[inv])
# Find rows that involve region of interest as receiving trade
v <- which(data_trade$ToRegion == reg[r.n])
# Find the intersection of the two sets
w <- intersect(u,v)
x <- data_trade[w,]
# Consider the trade instances occurred before or at the time of interest
x <- x[x$year<=y,]
trade_value <- NULL
# If there are rows in the filtered dataset
if(nrow(x)>0){
# For each invaded country, the maximum year is recorded
o <- aggregate(x$year, list(x$FromRegion), FUN=max)
# For each of them, the corresponding transfer is stored
for (o.i in 1:nrow(o)){
trade_value <- c(trade_value,
x$transfer[x$FromRegion==o[o.i,1] &
x$year==o[o.i,2]])}
}
} else {
# If there are not already invaded countries, trade is set equal to 0
trade_value <- 0
}
# Compute the log-transformed sum of trade values (with an added constant 1)
log_trade.value <- ifelse(length(trade_value)>0,
log(sum(trade_value, na.rm =T)+1),0)
# Return the computed log-transformed trade value
return(log_trade.value)
}
log_trade <- function(sp.n, r.n, y, native, first_records, reg, data_trade){
inv <- invaded.regions(sp.n = sp.n,
r.n = r.n,
y = y,
native = native,
first_records = first_records)
log_trade.value <- ifelse(r.n==match("USACanada", reg),
mean(trade.funct(inv = inv,
r.n = match("United States",reg),
y = y,
reg = reg,
data_trade = data_trade),
trade.funct(inv = inv,
r.n = match("Canada",reg),
y = y,
reg = reg,
data_trade = data_trade)),
trade.funct(inv = inv,
r.n = r.n,
y = y,
reg = reg,
data_trade = data_trade))
return(log_trade.value)
}
dat.gam$tr1 <- apply(dat.gam[,c("sp1.num", "r1.num", "year")], 1,
function(x) log_trade(sp.n = x[1],
r.n = x[2],
y = x[3],
native = native,
first_records =
first_records,
reg = reg,
data_trade = data_trade))
dat.gam$tr2 <- apply(dat.gam[,c("sp2.num", "r2.num", "year")], 1,
function(x) log_trade(x[1], x[2], x[3],
native = native,
first_records =
first_records,
reg = reg,
data_trade = data_trade))
dat.gam$tr = dat.gam$tr1 - dat.gam$tr2
save.image("solution02.RData")
load("solution02.RData")
gam_tr.only <- gam(y ~ s(year, by=tr) - 1,
family="binomial"(link = 'logit'),
method="REML", data=dat.gam)
summary(gam_tr.only)
plot(gam_tr.only)
b.tr <- getViz(gam_tr.only)
otr <- plot(sm(b.tr, 1))
pdf("log_trade_single.pdf", width = 11, height = 8)
otr + l_fitLine(colour = pal.rose[4], size=1) +
l_rug(mapping = aes(x=x, y=y), alpha = 0.8) +
ylim(-1, 3) +
l_ciLine(mul = 5, colour = 1, linetype = 2, size=0.5) +
labs(title = "Time-Varying Effect of Log-Trade",
subtitle = "Alien Insect Invasions - Trade-Only Model",
x = "Time (year)",
y = "Time-varying coefficient") +
theme(axis.text.x = element_text(color = "grey20",
size = 10, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20",
size = 12, angle = 0,
hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20",
size = 12, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
title = element_text(color = "black",
size = 14, angle = 0, hjust = .5, vjust = .5,
family="serif", face = "bold"))
dev.off()
knitr::include_graphics("log_trade_single.pdf")
knitr::include_graphics("distance-idea.pdf")
load("input03.RData")
log_distance <- function(sp.n, r.n, y, native, first_records, data_distance){
# Convert input arguments to numeric type if not already
sp.n <- as.numeric(sp.n)
r.n <- as.numeric(r.n)
y <- as.numeric(y)
# Find regions invaded by the species before the current time
inv <- invaded.regions(sp.n = sp.n,
r.n = r.n,
y = y,
native = native,
first_records = first_records)
# Consider the logarithm of the minimum distance
# between the region of interest and those already invaded
log_dist.value <- log(min(data_distance[r.n, inv])+1)
# Return the calculated distance
return(log_dist.value)
}
dat.gam$d1 <- apply(dat.gam[,c("sp1.num", "r1.num", "year")], 1,
function(x) log_distance(x[1], x[2], x[3],
native = native,
first_records =
first_records,
data_distance = data_distance))
dat.gam$d2 <- apply(dat.gam[,c("sp2.num", "r2.num", "year")], 1,
function(x) log_distance(x[1], x[2], x[3],
native = native,
first_records =
first_records,
data_distance = data_distance))
dat.gam$d = dat.gam$d1 - dat.gam$d2
save.image("solution03-01.RData")
knots <- seq(min(dat.gam$d1), max(dat.gam$d1), length.out=9)
degree <- 3
basis_matrix <- splineDesign(knots, dat.gam$d1,
ord = degree + 1,
outer.ok = TRUE)
basis_df <- as.data.frame(basis_matrix)
basis_df$distance <- dat.gam$d1
basis_df_long <- pivot_longer(basis_df,
cols = -distance,
names_to = "Basis",
values_to = "Value")
ggplot(basis_df_long, aes(x = distance, y = Value, color = Basis)) +
geom_line() +
labs(title = "B-spline Basis Functions of Degree 3",
x = "Distance",
y = "Basis Function Value") +
theme_minimal()
save.image("solution03-02.RData")
unit <- rep(1, nrow(dat.gam))
D = cbind(dat.gam$d1,dat.gam$d2)
I = cbind(unit,-unit)
gam_d.only <- gam(y ~ s(D, by=I) - 1,
family="binomial"(link = 'logit'),
method="REML", data=dat.gam)
summary(gam_d.only)
plot(gam_d.only)
b.d <- getViz(gam_d.only)
od <- plot(sm(b.d, 1))
pdf("log_dist_single.pdf", width = 11, height = 8)
od + l_fitLine(colour = pal.blue[4], size=1) +
l_rug(mapping = aes(x=x, y=y), alpha = 0.8) +
ylim(-2, 5) +
l_ciLine(mul = 5, colour = 1, linetype = 2, size=0.5) +
labs(title = "Time-Varying Effect of Log-Distance",
subtitle = "Alien Insect Invasions - Distance-Only Model",
x = "Time (year)",
y = "Time-varying coefficient") +
theme(axis.text.x = element_text(color = "grey20",
size = 10, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20",
size = 12, angle = 0,
hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20",
size = 12, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
title = element_text(color = "black",
size = 14, angle = 0, hjust = .5, vjust = .5,
family="serif", face = "bold"))
dev.off()
knitr::include_graphics("log_dist_single.pdf")
save(gam_d.only, file="gam_d.only.RData")
rm(gam_d.only)
save.image("input04.RData")
knitr::include_graphics("insect-idea.pdf")
load("input04.RData")
sp1 <- dat.gam$sp1
sp2 <- dat.gam$sp2
sp <- factor(c(sp1,sp2))
dim(sp) <- c(length(sp1),2)
save.image("solution04.RData")
load("solution04.RData")
gam_sp.only <- gam(y ~ s(sp, by=I, bs="re") - 1,
family="binomial"(link = 'logit'),
method="REML", data=dat.gam)
plot(gam_sp.only)
re.species <- coefficients(gam_sp.only)
names(re.species) <- levels(sp)
sort(re.species, decreasing = TRUE)[1:5]
sort(re.species)[1:5]
save(gam_sp.only, file="gam_sp.only.RData")
rm(gam_sp.only)
save.image("input05.RData")
knitr::include_graphics("insects.pdf")
load("input05.RData")
gam_complete <- gam(y ~ dt +
s(year, by=tr) +
s(D, by=I) +
s(sp, by=I, bs="re") - 1,
family="binomial"(link = 'logit'),
method="REML", data=dat.gam)
summary(gam_complete)
plot(gam_complete)
pdf("log_trade_distance.pdf", width = 11, height = 8, onefile = TRUE)
b.tr <- getViz(gam_complete)
otr <- plot(sm(b.tr, 1))
otr + l_fitLine(colour = pal.rose[4], size=1) +
l_rug(mapping = aes(x=x, y=y), alpha = 0.8) +
ylim(-1, 3) +
l_ciLine(mul = 5, colour = 1, linetype = 2, size=0.5) +
labs(title = "Time-Varying Effect of Log-Trade",
subtitle = "Alien Insect Invasions - Complete Model",
x = "Time (year)",
y = "Time-varying coefficient") +
theme(axis.text.x = element_text(color = "grey20",
size = 10, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20",
size = 12, angle = 0,
hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20",
size = 12, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
title = element_text(color = "black",
size = 14, angle = 0, hjust = .5, vjust = .5,
family="serif", face = "bold"))
b.d <- getViz(gam_complete)
od <- plot(sm(b.d, 2))
od + l_fitLine(colour = pal.blue[4], size=1) +
l_rug(mapping = aes(x=x, y=y), alpha = 0.8) +
ylim(-2, 5) +
l_ciLine(mul = 5, colour = 1, linetype = 2, size=0.5) +
labs(title = "Time-Varying Effect of Log-Distance",
subtitle = "Alien Insect Invasions - Complete Model",
x = "Time (year)",
y = "Time-varying coefficient") +
theme(axis.text.x = element_text(color = "grey20",
size = 10, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20",
size = 10, angle = 0,
hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20",
size = 12, angle = 0,
hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20",
size = 12, angle = 90,
hjust = .5, vjust = .5, face = "plain"),
title = element_text(color = "black",
size = 14, angle = 0, hjust = .5, vjust = .5,
family="serif", face = "bold"))
dev.off()
knitr::include_graphics("log_trade_distance.pdf")
sort(re.species, decreasing = TRUE)[1:5]
sort(re.species)[1:5]
re.species_complete <- coefficients(gam_complete)[21:length(coefficients(gam_complete))]
names(re.species_complete) <- levels(sp)
sort(re.species_complete, decreasing = TRUE)[1:5]
sort(re.species_complete)[1:5]
save(gam_complete, file="gam_complete.RData")
rm(gam_complete)
load(file="gam_dt.only.RData")
load(file="gam_tr.only.RData")
load(file="gam_d.only.RData")
load(file="gam_sp.only.RData")
load(file="gam_complete.RData")
AIC(gam_dt.only)
AIC(gam_tr.only)
AIC(gam_d.only)
AIC(gam_sp.only)
AIC(gam_complete)
save.image("output.RData")
knitr::knit_hooks$set(purl = knitr::hook_purl)
knitr::opts_chunk$set(echo = TRUE)
if (!require("mgcv", quietly = TRUE)) {
# If not installed, install it
install.packages("mgcv")
# Load the package
library("mgcv")
} else {
if (!require("splines", quietly = TRUE)) {
install.packages("splines")
library("splines")
} else {
if (!require("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
library("ggplot2")
} else {
if (!require("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
library("tidyverse")
} else {
if (!require("RColorBrewer", quietly = TRUE)){
install.packages("RColorBrewer")
} else {
if (!require("mgcViz", quietly = TRUE)){
install.packages("mgcViz")
} else {
library("mgcv")
library("splines")
library("ggplot2")
library("tidyverse")
library("RColorBrewer")
library("mgcViz")
}
}
}
}
}
}
load(file="input00.RData")
data_distance["Italy"]
data_distance["Italy",]
data_distance["United Kingdom","Italy"]
data_distance["United Kingdom","France"]
data_distance["United Kingdom","Greece"]
data_distance["United Kingdom","Switzerland"]
data_temperature["United Kingdom",]
data_temperature["United Kingdom",]
data_temperature
"UK" %in% data_temperature
"United Kingdom" %in% data_temperature
data_temperature[data_temperature[,1]=="United Kingdom",2]
data_temperature[data_temperature[,1]=="United Kingdom",2] - data_temperature[data_temperature[,1]=="Italy",2]
data_temperature[data_temperature[,1]=="United Kingdom",2] - data_temperature[data_temperature[,1]=="France",2]
data_temperature[data_temperature[,1]=="United Kingdom",2] - data_temperature[data_temperature[,1]=="Switzerland",2]
data_temperature[data_temperature[,1]=="United Kingdom",2] - data_temperature[data_temperature[,1]=="Greece",2]
which(data_trade$FromRegion == "Italy")
u <- which(data_trade$FromRegion %in% c("Italy", "France", "Greece", "
Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x
u <- which(data_trade$FromRegion %in% c("Italy"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x
u <- which(data_trade$FromRegion %in% c("Italy", "France", "Greece", "
Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year==2000,]
x
data_temperature[data_temperature[,1]=="United Kingdom",2] - data_temperature[data_temperature[,1]=="Switzerland",2]
u <- which(data_trade$FromRegion %in% c("Italy", "France", "Greece", "
Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year==2000,]
x
x <- x[x$year==1999,]
u <- which(data_trade$FromRegion %in% c(Switzerland"))
u <- which(data_trade$FromRegion %in% c("Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year<=2000,]
x
u <- which(data_trade$FromRegion %in% c("Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year<=2000,]
x
u <- which(data_trade$FromRegion %in% c("Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year==2000,]
x
u <- which(data_trade$FromRegion %in% c("Italy", "France", "Greece", "
Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year<=2000,]
X
x
x <- x[x$year<=2000,]
x
x <- x[x$year==2000,]
x
u <- which(data_trade$FromRegion %in% c("Italy", "Switzerland"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year==2000,]
x
u <- which(data_trade$FromRegion %in% c("Italy", "Switzerland",
"Greece", "France"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year==2000,]
x
u <- which(data_trade$FromRegion %in% c("Italy", "Switzerland",
"Greece", "France"))
v <- which(data_trade$ToRegion == "United Kingdom")
w <- intersect(u,v)
x <- data_trade[w,]
x <- x[x$year<=2000,]
if(nrow(x)>0){
# For each invaded country, the maximum year is recorded
o <- aggregate(x$year, list(x$FromRegion), FUN=max)
# For each of them, the corresponding transfer is stored
for (o.i in 1:nrow(o)){
trade_value <- c(trade_value,
x$transfer[x$FromRegion==o[o.i,1] &
x$year==o[o.i,2]])}
}
trade_value <- NULL
if(nrow(x)>0){
# For each invaded country, the maximum year is recorded
o <- aggregate(x$year, list(x$FromRegion), FUN=max)
# For each of them, the corresponding transfer is stored
for (o.i in 1:nrow(o)){
trade_value <- c(trade_value,
x$transfer[x$FromRegion==o[o.i,1] &
x$year==o[o.i,2]])}
}
trade_value
# Compute the log-transformed sum of trade values (with an added constant 1)
log_trade.value <- ifelse(length(trade_value)>0,
log(sum(trade_value, na.rm =T)+1),0)
log_trade.value
knitr::knit_hooks$set(purl = knitr::hook_purl)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("../02-Images/insects.pdf")
knitr::include_graphics(file="../02-Images/insects.pdf")
knitr::include_graphics(file="..02-Images/insects.pdf")
knitr::include_graphics("../02-Images/insects.pdf")
getwd
getwd()
knitr::include_graphics("../02-Images/insects.pdf")
knitr::include_graphics("../02-Images/insects.pdf")
load("../02-Images/insects.pdf")
knitr::include_graphics("02-Images/insects.pdf")
load(file="01-Data/01-Inputs/input00.RData")
load("01-Data/01-Inputs/input02.RData")
load(file="01-Data/01-Inputs/gam_d.only.RData")
load(file="01-Data/02-Gam-Fits/gam_dt.only.RData")
load(file="01-Data/02-Gam-Fits/gam_tr.only.RData")
load(file="01-Data/02-Gam-Fits/gam_d.only.RData")
load(file="01-Data/02-Gam-Fits/gam_sp.only.RData")
01-Data/01-Inputs/
load(file="01-Data/01-Inputs/input00.RData")
load(file="01-Data/01-Inputs/input00.RData")
load(file="01-Data/02-Gam-Fits/gam_sp.only.RData")
load(file="01-Data/01-Inputs/input00.RData")
load(file="01-Data/02-Gam-Fits/gam_d.only.RData")
